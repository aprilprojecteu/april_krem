#!/usr/bin/env python3

import time

# ROS
import rospy

# UP
from unified_planning.plans.plan import PlanKind
from unified_planning.model.metrics import (
    MinimizeMakespan,
    MinimizeSequentialPlanLength,
)

# April
from april_krem.domains.domain import Domain
from april_krem.plan_dispatcher import PlanDispatcher, KREM_STATE
from april_msgs.msg import (
    GestureBackupButtonStates,
    Gesture,
    PersonGesturesList,
)
from april_krem.krem_logging import KREMLogging


class AprilPlanDispatcher:
    def __init__(
        self,
        krem_logging,
        use_case: str = "",
        temporal_actions: bool = False,
        monitoring: bool = False,
    ):
        self._krem_logging = krem_logging
        self._domain = Domain(
            krem_logging, use_case=use_case, temporal=temporal_actions
        )

        self._dispatcher = PlanDispatcher(self._domain, krem_logging, monitoring)
        self._plan = None
        self._plan_graph = None
        self._goals = []
        self._temporal_actions = temporal_actions

        self._timeout = 60.0

        # Gesture Topics
        # only check camera2
        # self._gestures_camera1 = rospy.Subscriber(
        #     "/pem/camera1/human/gesture_results", PersonGesturesList, self._gesture_cb
        # )
        self._gestures_camera2 = rospy.Subscriber(
            "/pem/camera2/human/gesture_results", PersonGesturesList, self._gesture_cb
        )

        # Gesture Backup Buttons Topic
        self._gesture_backup_buttons = rospy.Subscriber(
            "/isim/hmi/gesture_backup_buttons",
            GestureBackupButtonStates,
            self._gesture_backup_button_cb,
        )

    def _gesture_backup_button_cb(self, msg: GestureBackupButtonStates):
        # RESET
        if msg.gesture_backup_button_state_0:
            rospy.logwarn("Gesture Backup Button 0 pressed! Reset Scenario!")
            PlanDispatcher.change_state(KREM_STATE.RESET)
            rospy.sleep(1)
            if self._domain is not None:
                self._domain.specific_domain._env.reset_env()
            PlanDispatcher.wait_for_human_intervention_message(
                "Press continue to reset scenario."
            )
        # CANCEL
        elif msg.gesture_backup_button_state_1:
            rospy.logwarn("Gesture Backup Button 1 pressed! Restart cycle!")
            PlanDispatcher.change_state(KREM_STATE.CANCELED)
            rospy.sleep(1)
            if self._domain is not None:
                self._domain.specific_domain._env.reset_env_keep_counters()
            PlanDispatcher.wait_for_human_intervention_message(
                "Press continue to reset cycle."
            )
        # STOP
        elif msg.gesture_backup_button_state_2:
            rospy.logwarn("Gesture Backup Button 2 pressed! Pausing action execution.")
            PlanDispatcher.change_state(KREM_STATE.PAUSED)
        # CONTINUE
        elif msg.gesture_backup_button_state_3:
            rospy.logwarn("Gesture Backup Button 3 pressed! Resuming action execution.")
            PlanDispatcher.change_state(KREM_STATE.ACTIVE)
        # RETRIEVE
        if msg.gesture_backup_button_state_4:
            pass
        # VALIDATE
        if msg.gesture_backup_button_state_5:
            pass
        # RESET SEEH (used by UPM)
        if msg.gesture_backup_button_state_6:
            pass
        # HOME
        if msg.gesture_backup_button_state_7:
            rospy.logwarn(
                "Gesture Backup Button 7 pressed! Return arm to home pose and reset scenario!"
            )
            PlanDispatcher.change_state(KREM_STATE.HOME)
            rospy.sleep(1)
            if self._domain is not None:
                self._domain.specific_domain._env.reset_env()
            result = PlanDispatcher.arm_to_home_pose_action()
            rospy.loginfo(f"Arm moved to home pose with result: {result}")

    def _gesture_cb(self, msg: PersonGesturesList):
        for gesture in msg.person_gestures_list:
            if gesture.gesture_left.confidence >= 0.7:
                if gesture.gesture_left.gesture == Gesture.CONTINUE:
                    rospy.logwarn("Gesture CONTINUE detected! Execution continues.")
                    PlanDispatcher.change_state(KREM_STATE.ACTIVE)
                    return
                elif gesture.gesture_left.gesture == Gesture.STOP:
                    rospy.logwarn("Gesture STOP detected! Execution paused.")
                    PlanDispatcher.change_state(KREM_STATE.PAUSED)
                    return
                elif gesture.gesture_left.gesture == Gesture.CANCEL:
                    rospy.logwarn("Gesture CANCEL detected! Execution canceled.")
                    PlanDispatcher.change_state(KREM_STATE.CANCELED)
                    rospy.sleep(1)
                    if self._domain is not None:
                        self._domain.specific_domain._env.reset_env_keep_counters()
                    PlanDispatcher.wait_for_human_intervention_message(
                        "Gesture or press continue to continue cycle at beginning."
                    )
                    return

            if gesture.gesture_right.confidence >= 0.7:
                if gesture.gesture_right.gesture == Gesture.CONTINUE:
                    rospy.logwarn("Gesture CONTINUE detected! Execution continues.")
                    PlanDispatcher.change_state(KREM_STATE.ACTIVE)
                    return
                elif gesture.gesture_right.gesture == Gesture.STOP:
                    rospy.logwarn("Gesture STOP detected! Execution paused.")
                    PlanDispatcher.change_state(KREM_STATE.PAUSED)
                    return
                elif gesture.gesture_right.gesture == Gesture.CANCEL:
                    rospy.logwarn("Gesture CANCEL detected! Execution canceled.")
                    PlanDispatcher.change_state(KREM_STATE.CANCELED)
                    rospy.sleep(1)
                    if self._domain is not None:
                        self._domain.specific_domain._env.reset_env_keep_counters()
                    PlanDispatcher.wait_for_human_intervention_message(
                        "Gesture or press continue to continue cycle at beginning."
                    )
                    return

    def plan(self, goal=None) -> bool:
        plan = None
        goal_set = self._domain.set_goal(goal)

        if goal_set:
            if self._temporal_actions:
                plan_start_time = time.time()
                plan = self._domain.solve(
                    planner_name="aries", metric=MinimizeMakespan()
                )
                plan_time = time.time() - plan_start_time
                self._krem_logging.log_info(f"[Planning] Time: {plan_time}")
                if plan is not None and plan:
                    rospy.loginfo("DispatcherROS: Found Plan!")
                    for start, action, duration in plan.timed_actions:
                        rospy.loginfo(
                            "%s: %s [%s]" % (float(start), action, float(duration))
                        )
            else:
                plan_start_time = time.time()
                plan = self._domain.solve(
                    planner_name="aries", metric=MinimizeSequentialPlanLength()
                )
                plan_time = time.time() - plan_start_time
                self._krem_logging.log_info(f"[Planning] Time: {plan_time}")
                if plan is not None:
                    # Convert to sequential plan for visualization and execution
                    plan = plan.convert_to(
                        PlanKind.SEQUENTIAL_PLAN, self._domain.problem
                    )
                    rospy.loginfo(f"DispatcherROS: Found Plan!\n{plan}")
        else:
            rospy.signal_shutdown("")

        if plan is not None and plan._actions:
            self._plan = plan
            self._plan_graph = self._domain.specific_domain.get_executable_graph(plan)
            return True
        else:
            msg = "Could not find plan!" if plan is None else "Plan is empty!"
            rospy.logerr(msg)
            self._plan = None
            self._plan_graph = None
            return False

    def execute(self) -> bool:
        if self._plan is not None and self._plan_graph is not None:
            rospy.loginfo("DispatcherROS: Started execution of plan!")
            result = self._dispatcher.execute_plan(self._plan, self._plan_graph)
            return result
        else:
            rospy.logerr("No plan available to execute!")
            return False


def main():
    rospy.init_node("plan_executor")
    rospy.loginfo("DispatcherROS: Plan Dispatcher started!")
    use_case = rospy.get_param("~use_case", default="uc6")
    temporal_actions = rospy.get_param("~temporal_actions", default=False)
    goal = rospy.get_param("~goal", default="")
    enable_monitor = rospy.get_param("~enable_monitor", default="False")

    if not goal:
        goal = None

    krem_logging = KREMLogging()
    dispatcher = AprilPlanDispatcher(
        krem_logging, use_case, temporal_actions, enable_monitor
    )

    def logging_hook():
        krem_logging.log_info(
            f"[DONE] Number of replans due to errors: {krem_logging.error_replan_counter}."
        )
        krem_logging.log_info(
            f"[DONE] Number of wait for human intervention actions {krem_logging.wfhi_counter}."
        )
        krem_logging.log_info(
            f"[DONE] {krem_logging.cycle_counter} Cycles completed after "
            f"{krem_logging.overall_cycle_time} seconds."
        )

    rospy.on_shutdown(logging_hook)

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        if PlanDispatcher.STATE == KREM_STATE.START:
            pass
        elif PlanDispatcher.STATE == KREM_STATE.ACTIVE:
            if krem_logging.cycle_start_time is None:
                krem_logging.cycle_start_time = time.time()
            plan_found = dispatcher.plan(goal=goal)
            if not plan_found:
                dispatcher._domain.specific_domain._env.reset_env()
                continue
            if PlanDispatcher.STATE == KREM_STATE.ACTIVE:
                result = dispatcher.execute()
                rospy.loginfo(
                    "DispatcherROS: Dispatcher finished with result " + str(result)
                )
        elif PlanDispatcher.STATE == KREM_STATE.PAUSED:
            pass
        elif PlanDispatcher.STATE == KREM_STATE.CANCELED:
            pass
        elif PlanDispatcher.STATE == KREM_STATE.FINISHED:
            if krem_logging.cycle_complete:
                krem_logging.cycle_counter += 1
                cycle_time = time.time() - krem_logging.cycle_start_time
                krem_logging.log_info(
                    f"[{krem_logging.cycle_counter}. Cycle] Finished after {cycle_time} seconds."
                )
                krem_logging.overall_cycle_time += cycle_time
                krem_logging.cycle_complete = False
                krem_logging.cycle_start_time = None

            PlanDispatcher.change_state(KREM_STATE.ACTIVE)
            rospy.sleep(1)
        elif PlanDispatcher.STATE == KREM_STATE.ERROR:
            pass
        rate.sleep()


if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
